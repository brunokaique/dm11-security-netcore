# SonarScanner for MSBuild
# Build, QA, Deploy

schedules:
# Run from Monday to Friday at 2:0 UTC (https://docs.microsoft.com/en-us/azure/devops/pipelines/process/scheduled-triggers?view=azure-devops&tabs=yaml#cron-syntax)
- cron: "0 2 * * 1-5"
  displayName: Nightly build
  branches:
    include:
    - master
  always: true

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  - group: sonarsource-build-variables
  - group: sonar-scanner-dotnet-variables

resources:
  repositories:
    - repository: commonTemplates
      type: git
      name: pipelines-yaml-templates
      ref: refs/tags/v1.0.11

stages:
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'build'
    burgrType: 'build'
    stageName: 'build'
    stageDisplayName: 'Build:'
    jobs:
    - job: build
      displayName: 'Build, UT, analyze on SonarCloud and stage to repox'
      workspace:
        clean: all
      variables:
       solution: 'SonarScanner.MSBuild.sln'
       tfsProcessorSolution: 'SonarScanner.MSBuild.TFS.sln'
       sonarCloudOrganization: 'sonarsource'
       sonarCloudMsBuildProjectKey: 'sonarscanner-msbuild'
       sonarCloudMsBuildProjectName: 'SonarScanner for MSBuild'
       buildPlatform: 'Any CPU'
       buildConfiguration: 'Release'
       MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
       MAVEN_OPTS: '-Xmx3072m -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
       commonMavenArguments: -B -Pdeploy-sonarsource -Dmaven.test.skip=true
      steps:
      - checkout: self
      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet 5.7.0'
        inputs:
          versionSpec: '5.7.0'
      - task: CacheBeta@0
        enabled: true
        displayName: Cache Maven local repo
        inputs:
          key: maven | pom.xml
          path: $(MAVEN_CACHE_FOLDER)

      - task: DownloadSecureFile@1
        name: snk
        inputs:
          secureFile: 'SonarSourceSecret.snk'
        displayName: 'Download snk'
      - task: DownloadSecureFile@1
        displayName: 'Download pfx'
        name: pfx
        inputs:
          secureFile: 'SonarSource-2021-2023.pfx'
      - task: PowerShell@2
        displayName: 'Promote project version'
        inputs:
          targetType: 'inline'
          script: |
            # Calculate the file path
            $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
            Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."

            # Read the version from the file
            [xml]$versionProps = Get-Content "$versionFilePath"
            $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
            Write-Host "Sonar project version is '${sonarProjectVersion}'"
            # Set the variable to it can be used by other tasks
            Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION]$sonarProjectVersion"
      - task: VSBuild@1
        displayName: 'Set BranchName, Sha1 and BuildNumber properties from Azdo pipeline variables'
        inputs:
          solution: 'scripts\version\ChangeVersion.proj'
          msbuildArgs: '/p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId)  /p:BuildConfiguration=$(BuildConfiguration)'
- task: SonarQubePrepare@5
  inputs:
    SonarQube: '.netcore'
    scannerMode: 'MSBuild'
    projectKey: 'SAST--Analysis'
    projectName: 'SAST--Analysis'
      - task: DotNetCoreCLI@2
        displayName: Dotnet restore $(tfsProcessorSolution)
        inputs:
          command: 'restore'
          projects: '$(tfsProcessorSolution)'
          feedsToUse: 'select'
          verbosityRestore: 'normal'  # Default is noisy 'Detailed'
      - task: NuGetCommand@2
        displayName: 'NuGet restore TFS Processor'
        inputs:
          command: 'restore'
          restoreSolution: '$(tfsProcessorSolution)'
          feedsToUse: 'select'
      - task: DotNetCoreCLI@2
        env:
          SignAssembly: 'true'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Build and prepare signing $(tfsProcessorSolution)'
        inputs:
          command: 'build'
          projects: '$(tfsProcessorSolution)'
          arguments: '/m /p:DeployExtension=false /p:platform="$(BuildPlatform)" /p:configuration=$(BuildConfiguration) /p:ZipPackageCompressionLevel=normal /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)"'
      - task: DotNetCoreCLI@2
        condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Build $(tfsProcessorSolution)'
        inputs:
          command: 'build'
          projects: '$(tfsProcessorSolution)'
          arguments: '/m /p:DeployExtension=false /p:platform="$(BuildPlatform)" /p:configuration=$(BuildConfiguration) /p:ZipPackageCompressionLevel=normal'
      - task: UseDotNet@2
        inputs:
          packageType: sdk
          version: 5.0.100
          installationPath: $(Agent.ToolsDirectory)/dotnet
        displayName: "Use .NET 5 SDK"
      - task: NuGetCommand@2
        displayName: 'NuGet restore $(solution)'
        inputs:
          command: 'restore'
          restoreSolution: '$(solution)'
          feedsToUse: 'select'
      - task: DotNetCoreCLI@2
        displayName: Dotnet restore $(solution)
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'select'
          verbosityRestore: 'normal'  # Default is noisy 'Detailed'
      - task: DotNetCoreCLI@2
        displayName: Install CycloneDX
        inputs:
          command: custom
          custom: tool
          feedsToUse: 'select'
          includeNuGetOrg: true 
          arguments: 'install --global CycloneDX'
      - task: DotNetCoreCLI@2
        displayName: Dotnet generate SBOM
        inputs:
          command: custom
          custom: CycloneDX
          projects: '$(solution)'
          arguments: '-t -j -o build'
      - task: DotNetCoreCLI@2
        env:
          SignAssembly: 'true'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Build and prepare signing $(solution)'
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '/m /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /p:configuration=$(BuildConfiguration) /p:platform="$(BuildPlatform)" /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)"'
      - task: DotNetCoreCLI@2
        condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Build $(solution)'
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '/m /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /p:configuration=$(BuildConfiguration) /p:platform="$(BuildPlatform)"'

      - powershell: |
          mkdir $(Build.SourcesDirectory)\coverage\

          //# Currently coverlet is not able to both merge the test results and convert them to OpenCover format.
          //# Due to this, we have to run tests per test project and merge the results.
          //# The last test run will do the conversion by using `-p:CoverletOutputFormat=opencover` parameter.
          function Run-Tests-With-Coverage {
            param (
              $projectPath
            )
            dotnet test $projectPath --configuration $(BuildConfiguration) -p:CollectCoverage=true -p:CoverletOutput="$(Build.SourcesDirectory)\coverage\" -p:Include=[SonarScanner.*]* -p:MergeWith="$(Build.SourcesDirectory)\coverage\coverage.net48.json" -r "$(Build.SourcesDirectory)\TestResults" --no-build --no-restore -l trx
          }
          Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.Common.Test\SonarScanner.MSBuild.Common.Test.csproj
          Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.PostProcessor.Test\SonarScanner.MSBuild.PostProcessor.Test.csproj
          Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.PreProcessor.Test\SonarScanner.MSBuild.PreProcessor.Test.csproj
          Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.Shim.Test\SonarScanner.MSBuild.Shim.Test.csproj
          Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.TFS.Test\SonarScanner.MSBuild.TFS.Test.csproj
          Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.Tasks.IntegrationTest\SonarScanner.MSBuild.Tasks.IntegrationTest.csproj
          Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.Test\SonarScanner.MSBuild.Test.csproj
          
          # This run is special since it will do the conversion too.
          dotnet test Tests\SonarScanner.MSBuild.Tasks.UnitTest\SonarScanner.MSBuild.Tasks.UnitTest.csproj --configuration $(BuildConfiguration) -p:CollectCoverage=true -p:CoverletOutput="$(Build.SourcesDirectory)\coverage\" -p:Include=[SonarScanner.*]* -p:MergeWith="$(Build.SourcesDirectory)\coverage\coverage.net48.json" -r "$(Build.SourcesDirectory)\TestResults" -p:CoverletOutputFormat=opencover --no-build --no-restore -l trx
        displayName: 'Run tests and compute coverage'

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.SourcesDirectory)\coverage\
          artifactName: CoverageReport

      - task: PowerShell@2
        displayName: 'Delete files created by unit tests'
        inputs:
          targetType: 'inline'
          script: |
            Get-ChildItem $(Agent.TempDirectory) -Filter 'dummy.*' -Recurse -Attributes !Directory | Remove-Item
      - task: SonarCloudAnalyze@1
        displayName: 'Run SonarCloud analysis'
      - task: PowerShell@2
        displayName: 'Package scanner files'
        inputs:
          targetType: 'inline'
          script: |
            . (Join-Path "scripts" "package-artifacts.ps1")
            . (Join-Path "scripts" "variables.ps1")

            Download-ScannerCli
            Package-Net46Scanner
            Package-NetScanner "netcoreapp3.1" "netcoreapp3.0"
            Package-NetScanner "netcoreapp2.1" "netcoreapp2.0"
            Package-NetScanner "net5.0" "net5.0"
          pwsh: true
      - powershell: .\scripts\whitesource\WhiteSource-Scan.ps1
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        env:
          JAVA_HOME_11_X64: '$(JAVA_HOME_11_X64)'
          WS_PRODUCTNAME: '$(WHITESOURCE_PRODUCTNAME)'
          WS_APIKEY: '$(WHITESOURCE_APIKEY)'
        displayName: "WhiteSource scan"
      - task: PowerShell@2
        displayName: Sign assemblies
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        env:
          SIGNTOOL_PATH: 'C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.17763.0\\x64\\signtool.exe'
          PFX_PASSWORD: $(pfxPassword2021-2023)
          PFX_SHA1: $(pfxSha1-2021-2023)
          PFX_PATH: $(pfx.secureFilePath)
        inputs:
          filePath: 'scripts\sign.ps1'
          pwsh: true
      - task: NuGetCommand@2
        displayName: 'Package dotnet global tool'
        inputs:
          command: 'pack'
          packagesToPack: 'nuspec\netcoreglobaltool\dotnet-sonarscanner.nuspec'
          packDestination: 'build'

          versioningScheme: 'off'
      - task: NuGetCommand@2
        displayName: "Sign NuGet packages"
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          command: 'custom'
          arguments: 'sign $(Build.SourcesDirectory)\build\dotnet-sonarscanner*.nupkg -CertificatePath $(pfx.secureFilePath) -CertificatePassword $(pfxPassword2021-2023) -Timestamper http://sha256timestamp.ws.symantec.com/sha256/timestamp'
      - task: PowerShell@2
        displayName: 'Write project version in file'
        inputs:
          targetType: 'inline'
          script: |
            Add-Content build/version.txt $(SONAR_PROJECT_VERSION)
      - task: DownloadSecureFile@1
        displayName: 'Download Maven settings'
        name: mavenSettings
        inputs:
          secureFile: 'maven-settings.xml'
      - task: PowerShell@2
        displayName: 'Generate packages'
        inputs:
          targetType: 'inline'
          script: |
            [xml]$versionProps = Get-Content "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
            $leakPeriodVersion = $versionProps.Project.PropertyGroup.MainVersion

            $artifactsFolder = "$env:BUILD_SOURCESDIRECTORY\\build"
            $version = $leakPeriodVersion + '.' + $env:BUILD_BUILDID

            $classicScannerZipPath = Get-Item "$artifactsFolder\\sonarscanner-msbuild-net46.zip"
            $dotnetScannerZipPath = Get-Item "$artifactsFolder\\sonarscanner-msbuild-netcoreapp2.0.zip"
            $dotnetScannerZipPath3 = Get-Item "$artifactsFolder\\sonarscanner-msbuild-netcoreapp3.0.zip"
            $dotnetScannerZipPath5 = Get-Item "$artifactsFolder\\sonarscanner-msbuild-net5.0.zip"
            $dotnetScannerGlobalToolPath = Get-Item "$artifactsFolder\\dotnet-sonarscanner.$leakPeriodVersion.nupkg"
            $sbomJsonPath = Get-Item "$(Build.SourcesDirectory)\build\bom.json"

            Write-Host "Generating the chocolatey packages"
            $classicZipHash = (Get-FileHash $classicScannerZipPath -Algorithm SHA256).hash
            $net46ps1 = "nuspec\chocolatey\chocolateyInstall-net46.ps1"
            (Get-Content $net46ps1) `
              -Replace '-Checksum "not-set"', "-Checksum $classicZipHash" `
              -Replace "__PackageVersion__", "$version" `
            | Set-Content $net46ps1

            $dotnetZipHash = (Get-FileHash $dotnetScannerZipPath -Algorithm SHA256).hash
            $netcoreps1 = "nuspec\chocolatey\chocolateyInstall-netcoreapp2.0.ps1"
            (Get-Content $netcoreps1) `
              -Replace '-Checksum "not-set"', "-Checksum $dotnetZipHash" `
              -Replace "__PackageVersion__", "$version" `
            | Set-Content $netcoreps1

            $dotnetZipHash3 = (Get-FileHash $dotnetScannerZipPath3 -Algorithm SHA256).hash
            $netcoreps13 = "nuspec\chocolatey\chocolateyInstall-netcoreapp3.0.ps1"
            (Get-Content $netcoreps13) `
              -Replace '-Checksum "not-set"', "-Checksum $dotnetZipHash3" `
              -Replace "__PackageVersion__", "$version" `
            | Set-Content $netcoreps13

            $dotnetZipHash5 = (Get-FileHash $dotnetScannerZipPath5 -Algorithm SHA256).hash
            $netcoreps15 = "nuspec\chocolatey\chocolateyInstall-net5.0.ps1"
            (Get-Content $netcoreps15) `
              -Replace '-Checksum "not-set"', "-Checksum $dotnetZipHash5" `
              -Replace "__PackageVersion__", "$version" `
            | Set-Content $netcoreps15

            choco pack nuspec\chocolatey\sonarscanner-msbuild-net46.nuspec `
            --outputdirectory $artifactsFolder `
            --version $version

            choco pack nuspec\chocolatey\sonarscanner-msbuild-netcoreapp2.0.nuspec `
            --outputdirectory $artifactsFolder `
            --version $version

            choco pack nuspec\chocolatey\sonarscanner-msbuild-netcoreapp3.0.nuspec `
            --outputdirectory $artifactsFolder `
            --version $version

            choco pack nuspec\chocolatey\sonarscanner-msbuild-net5.0.nuspec `
            --outputdirectory $artifactsFolder `
            --version $version

            Write-Host "Update artifacts locations in pom.xml"
            $pomFile = ".\pom.xml"
            (Get-Content $pomFile) `
             -Replace 'classicScannerZipPath', "$classicScannerZipPath" `
             -Replace 'dotnetScannerZipPath', "$dotnetScannerZipPath" `
             -Replace 'dotnet3ScannerZipPath', "$dotnetScannerZipPath3" `
             -Replace 'dotnet5ScannerZipPath', "$dotnetScannerZipPath5" `
             -Replace 'dotnetScannerGlobalToolPath', "$dotnetScannerGlobalToolPath" `
             -Replace 'classicScannerChocoPath', "$artifactsFolder\\sonarscanner-msbuild-net46.$version.nupkg" `
             -Replace 'dotnetcore2ScannerChocoPath', "$artifactsFolder\\sonarscanner-msbuild-netcoreapp2.0.$version.nupkg" `
             -Replace 'dotnetcore3ScannerChocoPath', "$artifactsFolder\\sonarscanner-msbuild-netcoreapp30.$version.nupkg" `
             -Replace 'dotnet5ScannerChocoPath', "$artifactsFolder\\sonarscanner-msbuild-net50.$version.nupkg" `
             -Replace 'sbomPath', "$sbomJsonPath" `
            | Set-Content $pomFile
      - task: Maven@3
        displayName: Promote new version in pom
        inputs:
         mavenPomFile: 'pom.xml'
         goals: 'org.codehaus.mojo:versions-maven-plugin:2.2:set'
         options: >-
          $(commonMavenArguments)
          -DnewVersion=$(SONAR_PROJECT_VERSION).$(Build.BuildId)
          --settings $(mavenSettings.secureFilePath)
          -DgenerateBackupPoms=false -e
         javaHomeOption: 'JDKVersion'
         mavenVersionOption: 'Default'
         jdkVersionOption: '1.11'
         mavenOptions: $(MAVEN_OPTS)
      - task: DownloadSecureFile@1
        displayName: 'Download the sign key'
        name: signKey
        inputs:
          secureFile: 'sign-key.asc'   
      - task: Maven@3
        displayName: 'Stage to repox'
        env:
          PROJECT_VERSION: $(SONAR_PROJECT_VERSION)
          BUILD_ID: $(Build.BuildId)
          ARTIFACTORY_DEPLOY_USERNAME: $(ARTIFACTORY_DEPLOY_USERNAME)
          ARTIFACTORY_DEPLOY_PASSWORD: $(ARTIFACTORY_DEPLOY_PASSWORD)
          PGP_SIGN_KEY_PATH: $(signKey.secureFilePath)
          PGP_PASSPHRASE: $(PGP_PASSPHRASE)
        inputs:
          goals: 'deploy'
          options: >-
            $(commonMavenArguments)
            --settings $(mavenSettings.secureFilePath)
            -Pdeploy-sonarsource,sign -e -V
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenOptions: $(MAVEN_OPTS)
      - task: PowerShell@2
        displayName: "Rename artifacts for GitHub Release"
        inputs:
          targetType: 'inline'
          script: |
            $artifactsFolder = "$env:BUILD_SOURCESDIRECTORY\\build"
            Rename-Item -Path "$artifactsFolder\\sonarscanner-msbuild-net46.zip" -NewName sonar-scanner-msbuild-$(SONAR_PROJECT_VERSION).$(Build.BuildId)-net46.zip
            Rename-Item -Path "$artifactsFolder\\sonarscanner-msbuild-netcoreapp2.0.zip" -NewName sonar-scanner-msbuild-$(SONAR_PROJECT_VERSION).$(Build.BuildId)-netcoreapp2.0.zip
            Rename-Item -Path "$artifactsFolder\\sonarscanner-msbuild-netcoreapp3.0.zip" -NewName sonar-scanner-msbuild-$(SONAR_PROJECT_VERSION).$(Build.BuildId)-netcoreapp3.0.zip
            Rename-Item -Path "$artifactsFolder\\sonarscanner-msbuild-net5.0.zip" -NewName sonar-scanner-msbuild-$(SONAR_PROJECT_VERSION).$(Build.BuildId)-net5.0.zip
      - task: PowerShell@2
        displayName: "Copy documentation file"
        inputs:
          targetType: 'inline'
          script: |
            Copy-Item "sonar-docs\\analysis\\scan\\sonarscanner-for-msbuild.md" -Destination "build"
      - task: PublishPipelineArtifact@1
        displayName: 'Publish packages as artifacts'
        inputs:
          targetPath: 'build'
          artifact: 'scanner-packages'
      - task: CmdLine@2
        displayName: Revert changes made to pom.xml to not break cache feature
        inputs:
          script: 'git checkout .'

- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'qa'
    burgrType: 'qa'
    stageName: 'qa'
    stageDisplayName: 'QA:'
    stageDependencies:
     - build
    jobs:
    - job: its
      displayName: 'Run ITs'
      strategy:
        matrix:
          vs2017_latest89:
            SQ_VERSION: "LATEST_RELEASE[8.9]"
            SONAR_CFAMILYPLUGIN_VERSION: "LATEST_RELEASE"
            SONAR_CSHARPPLUGIN_VERSION: "LATEST_RELEASE"
            SONAR_VBNETPLUGIN_VERSION: "LATEST_RELEASE"
            MSBUILD_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\MSBuild.exe"
            PLATFORMTOOLSET: "v140"
            WINDOWSSDKTARGET: "10.0.17763.0"
          vs2019_latest79:
            SQ_VERSION: "LATEST_RELEASE[7.9]"
            SONAR_CFAMILYPLUGIN_VERSION: "LATEST_RELEASE"
            SONAR_CSHARPPLUGIN_VERSION: "LATEST_RELEASE"
            SONAR_VBNETPLUGIN_VERSION: "LATEST_RELEASE"
            MSBUILD_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe"
            PLATFORMTOOLSET: "v140"
            WINDOWSSDKTARGET: "10.0.17763.0"
          vs2022_latest89:
            SQ_VERSION: "LATEST_RELEASE[8.9]"
            SONAR_CFAMILYPLUGIN_VERSION: "LATEST_RELEASE"
            SONAR_CSHARPPLUGIN_VERSION: "LATEST_RELEASE"
            SONAR_VBNETPLUGIN_VERSION: "LATEST_RELEASE"
            MSBUILD_PATH: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe"
            PLATFORMTOOLSET: "v140"
            WINDOWSSDKTARGET: "10.0.17763.0"
          vs2022_dev:
            SQ_VERSION: "DEV"
            SONAR_CFAMILYPLUGIN_VERSION: "LATEST_RELEASE"
            SONAR_CSHARPPLUGIN_VERSION: "LATEST_RELEASE"
            SONAR_VBNETPLUGIN_VERSION: "LATEST_RELEASE"
            MSBUILD_PATH: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe"
            PLATFORMTOOLSET: "v140"
            WINDOWSSDKTARGET: "10.0.17763.0"
      variables:
        MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
        MAVEN_OPTS: '-Xmx3072m -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
      pool: '.Net Bubble - GCP'
      steps:
       - checkout: self
         fetchDepth: 1
       - task: CacheBeta@0
         displayName: Cache Maven local repo
         inputs:
          key: maven | its/pom.xml
          path: $(MAVEN_CACHE_FOLDER)
       - task: DownloadSecureFile@1
         displayName: 'Download maven settings'
         name: mavenSettings
         inputs:
          secureFile: 'maven-settings.xml'
       - task: DownloadPipelineArtifact@2
         inputs:
          buildType: 'current'
          itemPattern: |
            *.zip
            version.txt
          targetPath: '$(Pipeline.Workspace)\\scanner-packages'
          artifactName: scanner-packages
       ## This JDK11 task uses hardcoded java version that is
       ## - downloaded from github release for VS image 2015 (because JDK8 is installed by default, and we need 11+ to run DEV / LTS7.9+)
       ## - Defined as per the java version installed and not used by default for VS2017 image (see : https://github.com/Microsoft/azure-pipelines-image-generation/blob/master/images/win/Vs2017-Server2016-Readme.md)
       - task: PowerShell@2
         displayName: "Write JDK11 path to JDK_PATH"
         inputs:
          targetType: 'inline'
          script: |
               Write-Host "##vso[task.setvariable variable=JDK_PATH]$JAVA_HOME_11_X64"
       - task: NuGetToolInstaller@1
         inputs:
          versionSpec: '5.8.0'
       - task: PowerShell@2
         displayName: "Get version from artifact file"
         inputs:
          targetType: 'inline'
          script: |
             $projectVersion = Get-Content "$(Pipeline.Workspace)\\scanner-packages\\version.txt"
             Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION]$projectVersion"
       - task: Maven@3
         displayName: 'Run Maven ITs for SQ $(SQ_VERSION)'
         env:
           ARTIFACTORY_QA_READER_USERNAME: $(ARTIFACTORY_QA_READER_USERNAME)
           ARTIFACTORY_QA_READER_PASSWORD: $(ARTIFACTORY_QA_READER_PASSWORD)
           # For Orchestrator
           ARTIFACTORY_API_KEY: $(ARTIFACTORY_API_KEY)
           GITHUB_TOKEN: $(GITHUB_TOKEN)
           MAVEN_LOCAL_REPOSITORY: $(MAVEN_CACHE_FOLDER)
           NUGET_PATH: $(NUGETEXETOOLPATH)
         inputs:
          goals: 'verify'
          options: --settings $(mavenSettings.secureFilePath) -B -e -Denable-repo=qa -Dsonar.cfamilyplugin.version=$(SONAR_CFAMILYPLUGIN_VERSION) -Dsonar.csharpplugin.version=$(SONAR_CSHARPPLUGIN_VERSION) -Dsonar.vbnetplugin.version=$(SONAR_VBNETPLUGIN_VERSION) -Dsonar.runtimeVersion=$(SQ_VERSION) -DscannerForMSBuild.version=$(SONAR_PROJECT_VERSION).$(Build.BuildId) -Dmsbuild.path="$(MSBUILD_PATH)" -Dmsbuild.plateformtoolset=$(PLATFORMTOOLSET) -Dmsbuild.windowssdk=$(WINDOWSSDKTARGET)
          publishJUnitResults: true
          mavenPomFile: 'its/pom.xml'
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          testRunTitle: 'ITs $(SQ_VERSION)'
          javaHomeOption: 'Path'
          jdkDirectory: $(JAVA_HOME_11_X64)
          mavenOptions: $(MAVEN_OPTS)
          mavenVersionOption: 'Default'
       - bash: git checkout .
         name: revertPomChanges
         displayName: Revert changes made to pom.xml to not break cache feature

- template: promote-stage.yml@commonTemplates
  parameters:
    stageName: 'Artifacts:'
    stageDependencies:
    - build
    - qa
